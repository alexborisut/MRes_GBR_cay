{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red102\green0\blue145;\red255\green255\blue255;\red0\green0\blue0;
}
{\*\expandedcolortbl;;\cssrgb\c48235\c12157\c63529;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0\c87059;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 //control/baseline for pixels\
// var line info: 
\f1\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 type: \cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 \strokec4 //LineString\cb1 \

\fs28 \cf2 \cb3 \strokec2 //coordinates: \cb1 \
\cf4 \cb3 \strokec4 //List (2 elements)\cb1 \
\cf2 \cb3 \strokec2 //0: \cb1 \
\cf4 \cb3 \strokec4 //[144.03106212901042,-11.588275835444621]\cb1 \

\fs26 //\

\fs28 \cf2 \cb3 \strokec2 //1: \cb1 \
\cf4 \cb3 \strokec4 //[144.03466701792644,-11.589810312179816]\cb1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\
\
\
\
// adding date of the image\
//sentinel 2 imagery\
var sentinel_2 = ee.ImageCollection("COPERNICUS/S2"),\
  trueColour = \{"bands": ["B4", "B3", "B2"], "min": 0, "max": 3000\},\
  local = ee.Geometry.Point([144.03512477052647,-11.590257766359628]),\
  geometry = ee.Geometry.Polygon(\
    [[[144.02963160646397,-11.594587881195766],\
    [144.04091834199863,-11.594587881195766],\
    [144.04091834199863,-11.586978605610462],\
    [144.02963160646397,-11.586978605610462]]], null, false);\
    \
var start_date = '2019-01-01';\
var end_date = '2019-12-31';\
\
var image = ee.Image(sentinel_2\
  .filterDate(start_date, end_date)\
  .filterBounds(local)\
  .sort('CLOUD_COVER', true)\
  .first());\
print('All metadata:', image);  \
print(image.id().getInfo());\
  \
var true_image = sentinel_2.median().clip(geometry);\
Map.addLayer(true_image, trueColour, 'Clipped True Image');\
\
var palette = ['184DE5', '1866E5', '1888E5', '18A1E5', '18C3E5', '18D9E5',\
              'F51693', 'F516B8', 'D316C2', 'C516D3', 'A516D3', 'B318E5',\
              '18E5BA', '18E594', '18E56F', '18E54D', '7FE518'];\
              \
var mndwi = image.normalizedDifference(['B11', 'B3']);\
\
var clipped_mndwi = mndwi.clip(Line);\
\
var clipped_image = image.clip(Line);\
var clipped_image_mndwi = clipped_image.normalizedDifference(['B11', 'B3']);\
\
//Map.addLayer(clipped_image_mndwi, \{min:0, max:1, palette: palette\}, 'mndwi clipped image:');\
Map.centerObject(local, 15);\
\
//lat-long extraction:\
//https://gis.stackexchange.com/questions/363930/getting-table-with-coordinates-and-pixel-value-for-polygon-from-google-earth-eng\
\
// Dictionary with bands for keys and list of pixels values for value\
var pixelsDict = clipped_mndwi\
  .select(['nd'])\
  .addBands(ee.Image.pixelLonLat()).reduceRegion(\{\
  reducer: ee.Reducer.toList(), \
  geometry: Line, \
  scale: 10\
\})\
\
var bandNames = pixelsDict.keys()\
\
// List of pixels, containing a list of band values\
var pixels = ee.Array(pixelsDict.values()).transpose().toList() \
var table = ee.FeatureCollection(\
  pixels.map(function (bandValues) \{\
    // Dictionary with bands for keys and valueband value for value\
    var properties = ee.Dictionary.fromLists(\
      bandNames, ee.Array(bandValues).toList()\
    )\
    // Set to null if you just want longitude and latitude as columns\
    var geometry = ee.Geometry.Point(\
      properties.getNumber('longitude'),\
      properties.getNumber('latitude')\
    )\
    return ee.Feature(geometry, properties)\
  \})  \
)\
print(table.limit(100))\
\
//converting to feature collection\
//var collection = table.sample(\{\
//    region: geometry,\
//    geometries: true,\
//    //scale: 5\
//    scale: 10\
//\});\
\
\
////get lat long\
//var latlon = ee.Image.pixelLonLat();\
//var collection = collection.addBands(latlon.select('longitude','latitude'))\
//\
////extract lat lon\
//collection=dem.select('longitude').reduceRegions(collection, ee.Reducer.mean().setOutputs(['long']), 10)\
//collection=dem.select('latitude').reduceRegions(collection, ee.Reducer.mean().setOutputs(['lat']), 10);\
//\
//\
\
var id = image.id().getInfo();\
print('Image ID:', id);\
\
//var collection3 = ee.Feature(collection).set('Image_id', print(image.id().getInfo()));\
//print('test', collection3.id);\
\
var collection2 = table.map(function(ft)\{\
  return ee.Feature(ft).set('Image_id', id)\
\});\
\
\
\
//print(collection3)\
\
print('Pixel count:', table.size());\
\
Export.table.toDrive(\{\
  collection: collection2,\
  folder: 'MNDWI',\
  description: 'mndwi_pixel_count_Raine_20230417_trial_1',\
  fileFormat: 'CSV',\
  selectors: ['Image_id','nd', 'latitude', 'longitude']\
\});}