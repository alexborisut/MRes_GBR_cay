{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
//direct from https://spatialthoughts.com/2020/04/13/extracting-time-series-ee/\
//with Raine information input\
//to investigate output information\
\
\
Map.centerObject(ee.Geometry.Point([144.03512477052647,-11.590257766359628]), 15);\
var gfsad = ee.Image("MODIS/MOD44W/MOD44W_005_2000_02_24");\
// Select 'landcover' band with pixel values 1 \
// which represent Rice and Wheat Rainfed crops\
var wheatrice = gfsad.select('water_mask').eq(0)\
\
//var uttarpradesh = ee.geometry.polygon(\
//    [[[144.02963160646397,-11.594587881195766],\
//    [144.04091834199863,-11.594587881195766],\
//    [144.04091834199863,-11.586978605610462],\
//    [144.02963160646397,-11.586978605610462]]]);\
// Uttar Pradesh is a large state in Indo-Gangetic Plain with\
// a large agricultural output.\
// We use the Global Administrative Unit Layers (GAUL) dataset to get the state boundary\
//var uttarpradesh = gaul.filter(ee.Filter.eq('ADM1_NAME', 'Uttar Pradesh'))\
// wheatrice image contains 1 and 0 pixels. We want to generate points\
// only in the pixels that are 1 (representing crop areas)\
// selfMask() masks the pixels with 0 value.\
var points = wheatrice.select('water_mask').eq(0).stratifiedSample(\{numPoints:100, region:uttarpradesh, geometries: true\} )\
// We need a unique id for each point. We take the feature id and set it as\
// a property so we can refer to each point easily\
\
\
var points = points.map(function(feature) \{\
  return ee.Feature(feature.geometry(), \{'id': feature.id()\})\
\})\
// Show the state polygon with a blue outline\
var outline = ee.Image().byte().paint(\{\
  featureCollection: uttarpradesh,\
  color: 1,\
  width: 3\
\});\
Map.addLayer(outline, \{palette: ['blue']\}, 'AOI')\
// Show the farm locations in green\
Map.addLayer(points, \{color: 'green'\}, 'Farm Locations')\
\
// Function to remove cloud and snow pixels\
function maskCloudAndShadows(image) \{\
  var cloudProb = image.select('MSK_CLDPRB');\
  var snowProb = image.select('MSK_SNWPRB');\
  var cloud = cloudProb.lt(5);\
  var snow = snowProb.lt(5);\
  var scl = image.select('SCL'); \
  var shadow = scl.eq(3); // 3 = cloud shadow\
  var cirrus = scl.eq(10); // 10 = cirrus\
  // Cloud probability less than 5% or cloud shadow classification\
  var mask = (cloud.and(snow)).and(cirrus.neq(1)).and(shadow.neq(1));\
  return image.updateMask(mask);\
\}\
// Adding a NDVI band\
function addMNDWI(image) \{\
  var mndwi = image.normalizedDifference(['B11', 'B3']).rename('mndwi')\
  return image.addBands([mndwi])\
\}\
var startDate = '2018-01-01'\
var endDate = '2022-12-31'\
// Use Sentinel-2 L2A data - which has better cloud masking\
var collection = ee.ImageCollection('COPERNICUS/S2_SR')\
    .filterDate(startDate, endDate)\
    .map(maskCloudAndShadows)\
    .map(addMNDWI)\
    .filter(ee.Filter.bounds(points))\
// View the median composite\
var vizParams = \{bands: ['B4', 'B3', 'B2'], min: 0, max: 2000\}\
Map.addLayer(collection.median(), vizParams, 'collection')\
\
var testPoint = ee.Feature(points.first())\
//Map.centerObject(testPoint, 10)\
var chart = ui.Chart.image.series(\{\
    imageCollection: collection.select('mndwi'),\
    region: testPoint.geometry()\
    \}).setOptions(\{\
      interpolateNulls: true,\
      lineWidth: 1,\
      pointSize: 3,\
      title: 'MNDWI for Raine Island from 2018-2022',\
      vAxis: \{title: 'MNDWI'\},\
      hAxis: \{title: 'Date', format: 'YYYY-MMM', gridlines: \{count: 12\}\}\
    \})\
print(chart)}