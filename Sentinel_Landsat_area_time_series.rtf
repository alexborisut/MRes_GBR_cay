var Raine
	type: Polygon
	coordinates: List (1 element)
	0: List (5 elements)
		0: [144.03005344188696,-11.594353631922099]
		1: [144.04069644725806,-11.594353631922099]
		2: [144.04069644725806,-11.587248839152902]
		3: [144.03005344188696,-11.587248839152902]
		4: [144.03005344188696,-11.594353631922099]
	geodesic: false
\
///////////\
\
\
//direct from https://spatialthoughts.com/2020/04/13/extracting-time-series-ee/\
\
//centering map on Raine Island\
Map.centerObject(ee.Geometry.Point([144.03512477052647,-11.590257766359628]), 15);\
\
//pulling global surface water information from 2000-2022\
var gsf = ee.Image("JRC/GSW1_4/GlobalSurfaceWater"); // greater time extent\
// Select 'max_extent' band with pixel values 1 --> refers to the max water has been determined to be present\
// which represent water presence\
var water = gsf.select('max_extent').eq(1);\
\
var points = water.select('max_extent').eq(1).stratifiedSample(\{numPoints:100, region:Raine, geometries: true\} )\
// We need a unique id for each point. We take the feature id and set it as\
// a property so we can refer to each point easily\
\
\
var points = points.map(function(feature) \{\
  return ee.Feature(feature.geometry(), \{'id': feature.id()\})\
\})\
// Show the state polygon with a blue outline\
var outline = ee.Image().byte().paint(\{\
  featureCollection: Raine,\
  color: 1,\
  width: 3\
\});\
Map.addLayer(outline, \{palette: ['blue']\}, 'AOI')\
\
\
// Function to remove cloud and snow pixels from sentinel image collection\
function maskCloudAndShadows(image) \{\
  var cloudProb = image.select('MSK_CLDPRB');\
  var snowProb = image.select('MSK_SNWPRB');\
  var cloud = cloudProb.lt(5);\
  var snow = snowProb.lt(5);\
  var scl = image.select('SCL'); \
  var shadow = scl.eq(3); // 3 = cloud shadow\
  var cirrus = scl.eq(10); // 10 = cirrus\
  // Cloud probability less than 5% or cloud shadow classification\
  var mask = (cloud.and(snow)).and(cirrus.neq(1)).and(shadow.neq(1));\
  return image.updateMask(mask);\
\}\
// Adding a NDVI band for sentinel 2 imagery\
function addMNDWI(image) \{\
  var mndwi = image.normalizedDifference(['B11', 'B3']).rename('mndwi')\
  return image.addBands([mndwi])\
\}\
\
//start date and end date for sentinel imagery, as sentinel-2 imagery was not available until 2015\
var startDate = '2015-01-01'\
var endDate = '2022-12-31'\
// Use Sentinel-2 L2A data - which has better cloud masking\
var collection = ee.ImageCollection('COPERNICUS/S2_SR')\
    .filterDate(startDate, endDate) // filtering date of images between start and end\
    .map(maskCloudAndShadows) // applying mask cloud and shadows function\
    .map(addMNDWI) // adding the mndwi band\
    .filter(ee.Filter.bounds(points))\
// View the median composite\
var vizParams = \{bands: ['B2', 'B3', 'B4'], min: 0, max: 3000\}\
Map.addLayer(collection.median(), vizParams, 'collection')\
\
var testPoint = ee.Feature(points.first())\
//Map.centerObject(testPoint, 10)\
\
//chart output\
var chart = ui.Chart.image.series(\{\
    imageCollection: collection.select('mndwi'),\
    region: testPoint.geometry()\
    \}).setOptions(\{\
      interpolateNulls: true,\
      lineWidth: 1,\
      pointSize: 3,\
      title: 'MNDWI for Raine Island from 2015-2022',\
      vAxis: \{title: 'MNDWI'\},\
      hAxis: \{title: 'Date', format: 'YYYY-MMM', gridlines: \{count: 12\}\}\
    \})\
print(chart)\
\
// visualising a video of change from following:\
//https://www.geospatialecology.com/emm_lab_10/\
\
var collection_vid = ee.ImageCollection('COPERNICUS/S2_SR')\
    .filterDate(startDate, endDate)\
    .map(maskCloudAndShadows)\
    .map(addMNDWI)\
    .filter(ee.Filter.bounds(points))\
    //.select(['B7', 'B5', 'B3'])\
    .select(['B2', 'B3', 'B4'])\
    // Need to make the data 8-bit.\
  .map(function(image) \{\
    return image.multiply(512).uint8();\
  \})\
 ;\
// View the median composite\
//Mapping the mean pixel value, note conversion to 8-bit data.\
Map.addLayer(collection_vid.median(), \{min:0,max:3000\}, 'Median')\
\
// Export (change dimensions or scale for higher quality).\
Export.video.toDrive(\{\
  collection: collection_vid,\
  folder: 'MNDWI',\
  description: 'Raine_Video_Export_Trial_3_20230427',\
  dimensions: 720,\
  framesPerSecond: 12,\
  region: Raine\
\});\
\
//////////////\
// combine (excluding video information, to count valid pixels?)\
\
/////////////////////////\
//prior code to combine with\
//https://gis.stackexchange.com/questions/253164/counting-number-of-pixel-identified-as-water-from-a-collection-of-landsat-image\
\
\
\
Map.centerObject(ee.Geometry.Point([144.03512477052647,-11.590257766359628]), 15);\
\
//global sea surface water from 2000-2022\
var gsf = ee.Image("JRC/GSW1_4/GlobalSurfaceWater");\
// Select 'max_extent' band with pixel values 1, selects where water is definitively present \
// which represent water presence\
var water = gsf.select('max_extent').eq(1);\
\
var points = water.select('max_extent').eq(1).stratifiedSample(\{numPoints:100, region:Raine, geometries: true\} )\
// We need a unique id for each point. We take the feature id and set it as\
// a property so we can refer to each point easily\
\
\
var points = points.map(function(feature) \{\
  return ee.Feature(feature.geometry(), \{'id': feature.id()\})\
\})\
// Show the state polygon with a blue outline, easier to visualise \
var outline = ee.Image().byte().paint(\{\
  featureCollection: Raine,\
  color: 1,\
  width: 3\
\});\
Map.addLayer(outline, \{palette: ['blue']\}, 'AOI')\
\
\
// Function to remove cloud and shadow pixels for sentinel imagery\
function maskCloudAndShadows(image) \{\
  var cloudProb = image.select('MSK_CLDPRB');\
  var snowProb = image.select('MSK_SNWPRB');\
  var cloud = cloudProb.lt(5);\
  var snow = snowProb.lt(5);\
  var scl = image.select('SCL'); \
  var shadow = scl.eq(3); // 3 = cloud shadow\
  var cirrus = scl.eq(10); // 10 = cirrus\
  // Cloud probability less than 5% or cloud shadow classification\
  var mask = (cloud.and(snow)).and(cirrus.neq(1)).and(shadow.neq(1));\
  return image.updateMask(mask);\
\}\
// Adding a NDVI band for sentinel imagery\
function addMNDWI(image) \{\
  var mndwi = image.normalizedDifference(['B11', 'B3']).rename('mndwi')\
  return image.addBands([mndwi])\
\}\
var startDate = '2015-01-01'\
var endDate = '2022-12-31'\
// Use Sentinel-2 L2A data - which has better cloud masking\
var collection = ee.ImageCollection('COPERNICUS/S2_SR')\
    .filterDate(startDate, endDate) //filtering dates of images returned\
    .map(maskCloudAndShadows) //masking cloud and shadow imagery that don't satisfy threshold\
    .map(addMNDWI) //adding mndwi band\
    .filter(ee.Filter.bounds(points))\
// View the median composite\
var vizParams = \{bands: ['B2', 'B3', 'B4'], min: 0, max: 3000\}\
Map.addLayer(collection.median(), vizParams, 'collection')\
\
var testPoint = ee.Feature(points.first());\
\
//viewing chart of sentinel 2 time series\
var chart = ui.Chart.image.series(\{\
    imageCollection: collection.select('mndwi'),\
    region: testPoint.geometry()\
    \}).setOptions(\{\
      interpolateNulls: true,\
      lineWidth: 1,\
      pointSize: 3,\
      title: 'MNDWI for Raine Island from 2015-2022',\
      vAxis: \{title: 'MNDWI'\},\
      hAxis: \{title: 'Date', format: 'YYYY-MMM', gridlines: \{count: 12\}\}\
    \})\
print(chart)\
\
\
var Sentinel = ee.ImageCollection('COPERNICUS/S2_SR')\
    .filterDate(startDate, endDate)\
    .map(maskCloudAndShadows)\
    //.map(addMNDWI)\
    .filter(ee.Filter.bounds(points));\
//var collection_filter = collection.filter(ee.Filter.eq('mndwi', -0.30));\
\
var gsf = ee.Image("JRC/GSW1_4/GlobalSurfaceWater");\
  var max_extent = gsf.select('max_extent').eq(1);\
\
// land function:\
var landfunction = function(image)\{\
  //add the NDWI band to the image\
  var mndwi = image.normalizedDifference(['B11', 'B3']).rename('MNDWI');\
  //get pixels above the threshold\
  //var land = mndwi.gt(max_extent);\
  var land = mndwi.lt(-0.30); // control for the mndwi values given.\
  //mask those pixels from the image\
  image = image.updateMask(land).addBands(mndwi);\
  //var test = ee.filter(mndwi, \{min: -0.30, max: 1\});\
 // image = image.updateMask(land).clip(mndwi,\{min: -0.30, max: 1\});\
\
  var area = ee.Image.pixelArea();\
  var landArea = land.multiply(area).rename('landArea');\
\
  image = image.addBands(landArea);\
\
  var stats = landArea.reduceRegion(\{\
    reducer: ee.Reducer.sum(), \
    geometry: Raine, \
    scale: 10,\
  \});\
\
  return image.set(stats);\
\};\
var collection = Sentinel.map(landfunction);\
print(collection);\
\
var chart = ui.Chart.image.series(\{\
  imageCollection: collection.select('landArea'), \
  region: Raine, \
  reducer: ee.Reducer.sum(), \
  scale: 10,\
\})\
.setOptions(\{\
      interpolateNulls: true,\
      lineWidth: 1,\
      pointSize: 3,\
      title: 'Land Area for Raine Island from 2015-2022',\
      vAxis: \{title: 'Area'\},\
      hAxis: \{title: 'Date', //format: 'YYYY-MMM-DD', //gridlines: \{count: 12\}\},\
       gridlines: \{\
            count: -1,\
            units: \{\
              days: \{format: ['MMM dd']\},\
              hours: \{format: ['HH:mm', 'ha']\},\
            \}\
          \},\
          minorGridlines: \{\
            units: \{\
              hours: \{format: ['hh:mm:ss a', 'ha']\},\
              minutes: \{format: ['HH:mm a Z', ':mm']\}\
            \}\},\
      trendlines: \{type: 'exponential', 0: \{color: 'CC0000'\}, visibleInLegend: true\}\
    \}\});\
print(chart);\
\
\
////////////////\
////////////////\
///////////////\
///////////////\
//same as above immediate but for Landsat\
\
function maskCloudAndShadowsL8 (image) \{\
  var scl = image.select('QA_PIXEL');\
  var cloud = scl.eq(3); //cloud\
  var shadow = scl.eq(4); // cloud shadow\
  var cirrus = scl.eq(2); // cirrus\
  // Cloud probability less than 5% or cloud shadow classification\
  var mask = (cloud.neq(1)).and(cirrus.neq(1)).and(shadow.neq(1));\
  return image.updateMask(mask);\
\}\
\
//choosing of bands \
//https://www.l3harrisgeospatial.com/docs/backgroundotherindices.html#:~:text=The%20MNDWI%20was%20originally%20developed,band%20between%201.55%2D1.75%20%C2%B5m.\
\
// Adding a NDVI band L8\
function addMNDWI_L8(image) \{\
  var mndwi = image.normalizedDifference(['SR_B6', 'SR_B3']).rename('mndwi')\
  return image.addBands([mndwi])\
\}\
\
//var startDate = '2018-01-01'\
//var endDate = '2022-12-31'\
var startDate_landsat = '2000-01-01'\
var endDate_landsat = '2022-12-31'\
// Use LANDSAT 8 Surface Reflectance \
var collection_L8 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')\
    .filterDate(startDate_landsat, endDate_landsat)\
    .map(maskCloudAndShadowsL8)\
    .map(addMNDWI_L8)\
    .filter(ee.Filter.bounds(points))\
// View the median composite\
var vizParams_L8 = \{bands: ['SR_B2', 'SR_B3', 'SR_B4'], min: 0, max: 0.3\}\
Map.addLayer(collection_L8.median(), vizParams_L8, 'collection_L8')\
\
//var testPoint = ee.Feature(points.first())\
//Map.centerObject(testPoint, 10)\
var chart = ui.Chart.image.series(\{\
    imageCollection: collection_L8.select('mndwi'),\
    region: testPoint.geometry()\
    \}).setOptions(\{\
      interpolateNulls: true,\
      lineWidth: 1,\
      pointSize: 3,\
      title: 'MNDWI for Raine Island from 2000-2022 Landsat 8',\
      vAxis: \{title: 'MNDWI'\},\
      hAxis: \{title: 'Date', format: 'YYYY-MMM', gridlines: \{count: 12\}\}\
    \})\
print(chart)\
\
\
var L8 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')\
    .filterDate(startDate_landsat, endDate_landsat)\
    .map(maskCloudAndShadowsL8)\
    //.map(addMNDWI)\
    .filter(ee.Filter.bounds(points));\
//var collection_filter = collection.filter(ee.Filter.eq('mndwi', -0.30));\
\
//var gsf = ee.Image("JRC/GSW1_4/GlobalSurfaceWater");\
  //var max_extent = gsf.select('max_extent').eq(1);\
\
// land function:\
var landfunction_l8 = function(image)\{\
  //add the NDWI band to the image\
  var mndwi_l8 = image.normalizedDifference(['SR_B6', 'SR_B3']).rename('MNDWI');\
  //get pixels above the threshold\
  //var land = mndwi.gt(max_extent);\
  var land = mndwi_l8.lt(max_extent); // control for the mndwi values given.\
  //mask those pixels from the image\
  image = image.updateMask(land).addBands(mndwi_l8);\
  //var test = ee.filter(mndwi, \{min: -0.30, max: 1\});\
 // image = image.updateMask(land).clip(mndwi,\{min: -0.30, max: 1\});\
\
  var area = ee.Image.pixelArea();\
  var landArea = land.multiply(area).rename('landArea');\
\
  image = image.addBands(landArea);\
\
  var stats = landArea.reduceRegion(\{\
    reducer: ee.Reducer.sum(), \
    geometry: Raine, \
    scale: 30,\
  \});\
\
  return image.set(stats);\
\};\
var collection_l8 = L8.map(landfunction_l8);\
print(collection_l8);\
\
var chart = ui.Chart.image.series(\{\
  imageCollection: collection_l8.select('landArea'), \
  region: Raine, \
  reducer: ee.Reducer.sum(), \
  scale: 30,\
\})\
.setOptions(\{\
      interpolateNulls: true,\
      lineWidth: 1,\
      pointSize: 3,\
      title: 'Land Area for Raine Island from 2000-2022 L8',\
      vAxis: \{title: 'Area'\},\
      hAxis: \{title: 'Date', //format: 'YYYY-MMM-DD', //gridlines: \{count: 12\}\},\
       gridlines: \{\
            count: -1,\
            units: \{\
              days: \{format: ['MMM dd']\},\
              hours: \{format: ['HH:mm', 'ha']\},\
            \}\
          \},\
          minorGridlines: \{\
            units: \{\
              hours: \{format: ['hh:mm:ss a', 'ha']\},\
              minutes: \{format: ['HH:mm a Z', ':mm']\}\
            \}\},\
      trendlines: \{type: 'exponential', 0: \{color: 'CC0000'\}, visibleInLegend: true\}\
    \}\});\
print(chart);\
\
///////////////\
//////////////\
/////////////\
//L8 only returned 1 record, so let's try with L7\
\
function maskCloudAndShadowsL7 (image) \{\
  var scl = image.select('SR_CLOUD_QA');\
  var cloud = scl.eq(1); //cloud\
  var shadow = scl.eq(2); // cloud shadow\
  //var cirrus = scl.eq(2); // cirrus\
  // Cloud probability less than 5% or cloud shadow classification\
  var mask = (cloud.neq(1)).and(shadow.neq(1));\
  return image.updateMask(mask);\
\}\
\
//choosing of bands \
//https://www.l3harrisgeospatial.com/docs/backgroundotherindices.html#:~:text=The%20MNDWI%20was%20originally%20developed,band%20between%201.55%2D1.75%20%C2%B5m.\
\
// Adding a NDVI band L8\
function addMNDWI_L7(image) \{\
  var mndwi = image.normalizedDifference(['SR_B5', 'SR_B2']).rename('mndwi')\
  return image.addBands([mndwi])\
\}\
\
//var startDate = '2018-01-01'\
//var endDate = '2022-12-31'\
var startDate_landsat = '2000-01-01'\
var endDate_landsat = '2022-12-31'\
// Use LANDSAT 8 Surface Reflectance \
var collection_L7 = ee.ImageCollection('LANDSAT/LE07/C02/T1_L2')\
    .filterDate(startDate_landsat, endDate_landsat)\
    .map(maskCloudAndShadowsL7)\
    .map(addMNDWI_L7)\
    .filter(ee.Filter.bounds(points))\
// View the median composite\
var vizParams_L7 = \{bands: ['SR_B2', 'SR_B3', 'SR_B4'], min: 0, max: 1\}\
Map.addLayer(collection_L7.median(), vizParams_L7, 'collection_L7')\
\
//var testPoint = ee.Feature(points.first())\
//Map.centerObject(testPoint, 10)\
var chart = ui.Chart.image.series(\{\
    imageCollection: collection_L7.select('mndwi'),\
    region: testPoint.geometry()\
    \}).setOptions(\{\
      interpolateNulls: true,\
      lineWidth: 1,\
      pointSize: 3,\
      title: 'MNDWI for Raine Island from 2000-2022 Landsat 7',\
      vAxis: \{title: 'MNDWI'\},\
      hAxis: \{title: 'Date', format: 'YYYY-MMM', gridlines: \{count: 12\}\}\
    \})\
print(chart)\
\
\
var L7 = ee.ImageCollection('LANDSAT/LE07/C02/T1_L2')\
    .filterDate(startDate_landsat, endDate_landsat)\
    .map(maskCloudAndShadowsL7)\
    //.map(addMNDWI)\
    .filter(ee.Filter.bounds(points));\
//var collection_filter = collection.filter(ee.Filter.eq('mndwi', -0.30));\
\
//var gsf = ee.Image("JRC/GSW1_4/GlobalSurfaceWater");\
  //var max_extent = gsf.select('max_extent').eq(1);\
\
// land function:\
var landfunction_l7 = function(image)\{\
  //add the NDWI band to the image\
  var mndwi_l7 = image.normalizedDifference(['SR_B5', 'SR_B2']).rename('MNDWI');\
  //get pixels above the threshold\
  //var land = mndwi.gt(max_extent);\
  var land = mndwi_l7.lt(max_extent); // control for the mndwi values given.\
  //mask those pixels from the image\
  image = image.updateMask(land).addBands(mndwi_l7);\
  //var test = ee.filter(mndwi, \{min: -0.30, max: 1\});\
 // image = image.updateMask(land).clip(mndwi,\{min: -0.30, max: 1\});\
\
  var area = ee.Image.pixelArea();\
  var landArea = land.multiply(area).rename('landArea');\
\
  image = image.addBands(landArea);\
\
  var stats = landArea.reduceRegion(\{\
    reducer: ee.Reducer.sum(), \
    geometry: Raine, \
    scale: 30,\
  \});\
\
  return image.set(stats);\
\};\
var collection_l7 = L7.map(landfunction_l7);\
print(collection_l7);\
\
var chart = ui.Chart.image.series(\{\
  imageCollection: collection_l7.select('landArea'), \
  region: Raine, \
  reducer: ee.Reducer.sum(), \
  scale: 30,\
\})\
.setOptions(\{\
      interpolateNulls: true,\
      lineWidth: 1,\
      pointSize: 3,\
      title: 'Land Area for Raine Island from 2000-2022 L7',\
      vAxis: \{title: 'Area'\},\
      hAxis: \{title: 'Date', //format: 'YYYY-MMM-DD', //gridlines: \{count: 12\}\},\
       gridlines: \{\
            count: -1,\
            units: \{\
              days: \{format: ['MMM dd']\},\
              hours: \{format: ['HH:mm', 'ha']\},\
            \}\
          \},\
          minorGridlines: \{\
            units: \{\
              hours: \{format: ['hh:mm:ss a', 'ha']\},\
              minutes: \{format: ['HH:mm a Z', ':mm']\}\
            \}\},\
      trendlines: \{type: 'exponential', 0: \{color: 'CC0000'\}, visibleInLegend: true\}\
    \}\});\
print(chart);}
